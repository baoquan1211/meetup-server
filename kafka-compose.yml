version: "3.9"

networks:
  kafka_networks:
    driver: bridge
  microservices_networks:
    external: true

services:
  zoo:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo
    container_name: zoo
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo:2888:3888
    volumes:
      - zoo-data:/var/lib/zookeeper/data
      - zoo-log:/var/lib/zookeeper/log
    networks:
      - microservices_networks
      - kafka_networks

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    restart: always
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    volumes:
      - kafka-logs:/tmp/kafka-logs
      - kafka-data:/var/lib/kafka/data
    depends_on:
      - zoo
    networks:
      - microservices_networks
      - kafka_networks

  init-kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    networks:
      - microservices_networks
      - kafka_networks
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:19092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic booking --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic payment_return --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic new_booking --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic new_event --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic payment --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic update_profile --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic user --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic NewEvent --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:19092 --create --if-not-exists --topic NewEven --replication-factor 1 --partitions 1



      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:19092 --list
      "

volumes:
  zoo-data:
  zoo-log:
  kafka-logs:
  kafka-data:
  kui-config:
